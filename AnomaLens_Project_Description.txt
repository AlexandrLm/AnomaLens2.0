# Полное Описание Проекта AnomaLens 2.0

## 1. Обзор Проекта

**Назначение:** AnomaLens 2.0 - это full-stack веб-приложение, предназначенное для обнаружения аномалий в данных, имитирующих деятельность интернет-магазина. Оно включает генерацию тестовых данных, запись пользовательской активности, применение различных алгоритмов машинного обучения для выявления подозрительных паттернов и предоставление пользовательского интерфейса для визуализации данных и результатов анализа.

**Основные цели:**
*   Демонстрация применения различных методов обнаружения аномалий (статистических, на основе плотности, ансамблевых, нейросетевых).
*   Предоставление интерактивного инструмента для анализа данных и исследования аномалий.
*   Создание расширяемой платформы для добавления новых источников данных и детекторов.

## 2. Архитектура

Проект разделен на две основные части:

*   **Frontend:** Одностраничное приложение (SPA), написанное на React, отвечающее за пользовательский интерфейс, отображение данных и взаимодействие с пользователем.
*   **Backend:** API-сервер, написанный на Python с использованием FastAPI, который обрабатывает запросы от фронтенда, взаимодействует с базой данных, запускает генерацию данных и выполняет задачи машинного обучения.

**Взаимодействие:** Frontend общается с Backend через RESTful API.

## 3. Frontend (`frontend/`)

*   **Технологии:**
    *   React
    *   Vite (сборщик)
    *   Material UI (MUI) (библиотека компонентов)
    *   Chart.js & react-chartjs-2 (графики)
    *   Axios (HTTP-запросы)
    *   React Router (навигация)
    *   Date-fns (работа с датами)
*   **Основные Разделы (Страницы):**
    *   `/` (Панель Управления): Сводная информация, недавние аномалии, основные графики.
    *   `/simulator` (Симулятор Данных): Генерация тестовых данных.
    *   `/customers`, `/products`, `/orders`, `/activities`: Просмотр списков сущностей.
    *   `/analysis` (Анализ Признаков): Визуализация данных с помощью Scatter Plot (выбор сущности и признаков, подсветка аномалий).
    *   `/explanation` (О Методах): Описание ML-алгоритмов.
    *   `/settings` (Настройки): Конфигурация параметров ML.
*   **Запуск:** `npm install` -> `npm run dev` (в директории `frontend`)

## 4. Backend (`backend/`)

*   **Технологии:**
    *   FastAPI (веб-фреймворк)
    *   Uvicorn (ASGI сервер)
    *   SQLAlchemy (ORM для работы с БД)
    *   Pydantic (валидация данных API)
    *   SQLite (база данных по умолчанию)
    *   Scikit-learn, Pandas, NumPy (анализ данных и ML)
    *   TensorFlow/Keras (для модели Autoencoder)
    *   Faker (генерация тестовых данных)
    *   Joblib (сохранение/загрузка ML-моделей/объектов)
    *   Python-dotenv (управление переменными окружения)
*   **Структура Директории:**
    *   `main.py`: Точка входа FastAPI приложения, инициализация, CORS, подключение роутеров.
    *   `database.py`: Настройка SQLAlchemy (engine, SessionLocal, Base, get_db). Читает `DATABASE_URL` из `.env`.
    *   `.env`: Файл переменных окружения (содержит `DATABASE_URL`).
    *   `models.py`: Определения моделей данных SQLAlchemy (ORM-классы таблиц).
    *   `schemas.py`: Определения схем Pydantic для валидации API запросов/ответов.
    *   `crud.py`: Функции для выполнения операций CRUD (Create, Read, Update, Delete) с базой данных.
    *   `api/`: Директория с роутерами FastAPI, группирующими эндпоинты по логике:
        *   `store.py`: Управление магазином (товары, категории, клиенты, заказы).
        *   `activities.py`: Работа с активностями пользователей.
        *   `simulator.py`: Запуск генератора данных.
        *   `anomalies.py`: Обучение, детекция, получение аномалий.
        *   `dashboard.py`: Сводная статистика.
        *   `charts.py`: Данные для графиков.
        *   `settings.py`: Управление настройками ML.
    *   `ml_service/`: Модуль для логики машинного обучения.
        *   `common.py`: Общие функции (feature engineering), константы (признаки, пути).
        *   `detector.py`: Реализация детекторов (Statistical Z-score, Isolation Forest, DBSCAN).
        *   `autoencoder_detector.py`: Реализация детектора на основе Автоэнкодера.
        *   `saved_models/`: Директория для сохранения обученных моделей, скейлеров, статистик (игнорируется Git).
    *   `simulator/`: Модуль для генерации тестовых данных.
        *   `generator.py`: Логика генерации сущностей с использованием Faker.
    *   `utils.py`: Вспомогательные функции (например, работа с настройками).
    *   `requirements.txt`: Список зависимостей Python.
*   **Запуск:** `pip install -r backend/requirements.txt` -> `uvicorn backend.main:app --reload --port 8001` (в корневой директории проекта, с активным виртуальным окружением).

### 4.1. Структура Базы Данных (`backend/models.py`)

База данных (по умолчанию SQLite, файл `./anomalens.db`) содержит следующие таблицы:

*   **`categories` (Модель `Category`)**
    *   `id` (Integer, Primary Key, Index): Уникальный идентификатор категории.
    *   `name` (String, Unique, Index, Not Null): Название категории.
    *   `description` (Text, Nullable): Описание категории.
    *   *Связи:* Один-ко-многим с `Product` (`products`).

*   **`products` (Модель `Product`)**
    *   `id` (Integer, Primary Key, Index): Уникальный идентификатор товара.
    *   `name` (String, Index, Not Null): Название товара.
    *   `description` (Text, Nullable): Описание товара.
    *   `price` (Float, Not Null): Цена товара.
    *   `category_id` (Integer, ForeignKey -> `categories.id`, Nullable): ID категории.
    *   *Связи:* Многие-к-одному с `Category` (`category`), Один-ко-многим с `OrderItem` (`order_items`).

*   **`customers` (Модель `Customer`)**
    *   `id` (Integer, Primary Key, Index): Уникальный идентификатор клиента.
    *   `email` (String, Unique, Index, Not Null): Email клиента.
    *   `first_name` (String, Nullable): Имя.
    *   `last_name` (String, Nullable): Фамилия.
    *   `created_at` (DateTime(timezone=True), Server Default: now()): Дата и время создания.
    *   *Связи:* Один-ко-многим с `Order` (`orders`), Один-ко-многим с `UserActivity` (`activities`).

*   **`orders` (Модель `Order`)**
    *   `id` (Integer, Primary Key, Index): Уникальный идентификатор заказа.
    *   `customer_id` (Integer, ForeignKey -> `customers.id`, Not Null): ID клиента.
    *   `created_at` (DateTime(timezone=True), Server Default: now()): Дата и время создания заказа.
    *   `total_amount` (Float, Not Null): Общая сумма заказа.
    *   `status` (String, Default: 'pending'): Статус заказа.
    *   *Связи:* Многие-к-одному с `Customer` (`customer`), Один-ко-многим с `OrderItem` (`items`).

*   **`order_items` (Модель `OrderItem`)**
    *   `id` (Integer, Primary Key, Index): Уникальный идентификатор позиции в заказе.
    *   `order_id` (Integer, ForeignKey -> `orders.id`, Not Null): ID заказа.
    *   `product_id` (Integer, ForeignKey -> `products.id`, Not Null): ID товара.
    *   `quantity` (Integer, Not Null): Количество товара.
    *   `price` (Float, Not Null): Цена товара на момент заказа.
    *   *Связи:* Многие-к-одному с `Order` (`order`), Многие-к-одному с `Product` (`product`).

*   **`user_activities` (Модель `UserActivity`)**
    *   `id` (Integer, Primary Key, Index): Уникальный идентификатор активности.
    *   `customer_id` (Integer, ForeignKey -> `customers.id`, Nullable, Index): ID клиента (может быть Null для анонимов).
    *   `session_id` (String, Index, Nullable): Идентификатор сессии пользователя.
    *   `timestamp` (DateTime(timezone=True), Server Default: now(), Index): Время совершения действия.
    *   `action_type` (String, Not Null, Index): Тип действия (например, 'view_product', 'login', 'search').
    *   `details` (JSON, Nullable): Дополнительные детали действия (например, `product_id`, `search_query`, `order_total`).
    *   `ip_address` (String, Nullable, Index): IP-адрес пользователя.
    *   `user_agent` (String, Nullable): User Agent браузера.
    *   *Связи:* Многие-к-одному с `Customer` (`customer`).

*   **`anomalies` (Модель `Anomaly`)**
    *   `id` (Integer, Primary Key, Index): Уникальный идентификатор записи об аномалии.
    *   `entity_type` (String, Index, Not Null): Тип сущности, в которой найдена аномалия ('activity', 'order').
    *   `entity_id` (Integer, Index, Not Null): ID аномальной сущности (например, `user_activities.id`).
    *   `detection_timestamp` (DateTime(timezone=True), Server Default: now(), Index): Время обнаружения аномалии.
    *   `description` (Text, Not Null): Сгенерированное описание аномалии (причина срабатывания детектора).
    *   `severity` (String, Nullable, Index): Оценка серьезности ('low', 'medium', 'high').
    *   `detector_name` (String, Nullable): Название детектора, нашедшего аномалию.
    *   `details` (JSON, Nullable): Дополнительные детали от детектора (например, значения признаков, SHAP values).
    *   `anomaly_score` (Float, Nullable): Численная оценка аномальности от детектора (если применимо).

*   **`settings` (Модель `Setting`)**
    *   `key` (String, Primary Key, Index): Уникальное имя настройки.
    *   `value` (String): Значение настройки (хранится как строка).

### 4.2. Краткий Обзор API Эндпоинтов (`backend/api/`)

*   `/api/store`: CRUD операции для Категорий, Товаров, Клиентов, Заказов.
*   `/api/activities`: Запись новой активности, получение списка активностей (с пагинацией/фильтрацией), получение контекста сессии.
*   `/api/simulator`: Запуск генерации тестовых данных (`POST /generate`).
*   `/api/anomalies`: Запуск обучения (`POST /train`), запуск детекции (`POST /detect`), получение списка обнаруженных аномалий (`GET /`), удаление аномалий (`DELETE /`).
*   `/api/dashboard`: Получение сводной статистики (`GET /summary`).
*   `/api/charts`: Получение данных для графиков на фронтенде (например, `GET /activity_timeline`, `GET /anomaly_summary`).
*   `/api/settings`: Получение (`GET /`) и обновление (`PUT /`) настроек ML.

Полная интерактивная документация доступна через Swagger UI по адресу `/docs` после запуска бэкенда.

## 5. Сервис Машинного Обучения (`backend/ml_service/`)

Отвечает за весь пайплайн обнаружения аномалий в активностях пользователей (и потенциально в заказах).

### 5.1. Инженерия Признаков (`common.engineer_features`)

*   **Цель:** Преобразовать сырые логи `UserActivity` в числовые и категориальные признаки, пригодные для моделей.
*   **Процесс:**
    1.  Создание DataFrame из списка активностей.
    2.  Извлечение деталей из JSON (`details_order_total`, `details_quantity`).
    3.  Расчет временных признаков (`timestamp_hour`, `timestamp_dayofweek`).
    4.  Расчет признаков на основе контекста IP/сессии (требует отсортированных данных):
        *   `time_since_last_activity_ip`: Время с последней активности с того же IP.
        *   `actions_in_last_5min_ip`: Количество действий с того же IP за последние 5 минут (скользящее окно).
        *   `failed_logins_in_last_15min_ip`: Количество неудачных логинов с того же IP за 15 минут (скользящее окно).
    5.  Обработка пропусков (например, `customer_id` -> -1).
    6.  Очистка типов данных, обработка NaN/inf.
*   **Основные Признаки:** `NUMERICAL_FEATURES` (список числовых), `CATEGORICAL_FEATURE` ('action_type').

### 5.2. Предобработка

*   **One-Hot Encoding (OHE):** Категориальный признак `action_type` преобразуется в набор бинарных колонок.
*   **Масштабирование (`StandardScaler`):** Все числовые признаки (и OHE-признаки) масштабируются к нулевому среднему и единичному стандартному отклонению. Это важно для алгоритмов, чувствительных к масштабу (DBSCAN, AE, иногда IF).

### 5.3. Детекторы Аномалий

*   **Statistical Z-Score (`StatisticalDetector`)**
    *   *Принцип:* Аномалии - это точки, значения признаков которых сильно отклоняются от среднего.
    *   *Обучение:* Расчет среднего (μ) и станд. отклонения (σ) для каждого числового признака на обучающей выборке. Сохранение статистик.
    *   *Детекция:* Расчет Z-оценки `(X - μ) / σ`. Если `|Z| > z_threshold`, точка считается аномальной по этому признаку.
    *   *Плюс:* Простота, интерпретируемость. *Минус:* Чувствительность к выбросам при обучении, предположение о нормальности.

*   **Isolation Forest (`IsolationForestDetector`)**
    *   *Принцип:* Аномалии легче изолировать (отделить) от нормальных точек случайными разрезами.
    *   *Обучение:* Построение ансамбля изолирующих деревьев на данных (после OHE и масштабирования). Сохранение модели и скейлера.
    *   *Детекция:* Расчет "оценки аномальности" (`decision_function`). Точки с оценкой ниже порога (определяемого параметром `contamination`) считаются аномалиями. SHAP values могут использоваться для интерпретации.
    *   *Плюс:* Эффективен на многомерных данных, не требует предположений о распределении. *Минус:* Может быть менее интерпретируем без SHAP.

*   **DBSCAN (`DbscanDetector`)**
    *   *Принцип:* Аномалии - это точки в областях с низкой плотностью (шум).
    *   *Обучение:* Не требует явного обучения модели, но использует скейлер, обученный на исторических данных.
    *   *Детекция:* Применение алгоритма DBSCAN к данным (после OHE и масштабирования). Точки, не попавшие ни в один кластер (метка -1), считаются аномалиями.
    *   *Плюс:* Находит кластеры произвольной формы. *Минус:* Очень чувствителен к параметрам `eps` и `min_samples`, требует тщательного подбора.

*   **Autoencoder (`AutoencoderDetector`)**
    *   *Принцип:* Нейросеть обучается сжимать и восстанавливать нормальные данные; аномалии будут плохо восстанавливаться.
    *   *Обучение:* Обучение автоэнкодера (Keras/TensorFlow) на нормальных данных (после OHE и масштабирования) для минимизации ошибки реконструкции (MSE). Сохранение модели и скейлера.
    *   *Детекция:* Расчет ошибки реконструкции (MSE) для новых данных. Если `MSE > anomaly_threshold`, точка считается аномальной.
    *   *Плюс:* Может улавливать сложные нелинейные паттерны. *Минус:* Требует больше данных, сложнее в настройке и интерпретации ("черный ящик").

### 5.4. Сохранение и Загрузка

*   Обученные модели (IF, AE), статистики (Z-Score) и объекты предобработки (StandardScaler, OHE-категории) сохраняются в директорию `backend/ml_service/saved_models/` с использованием `joblib` или Keras API.
*   При инициализации детекторы пытаются загрузить сохраненное состояние.

## 6. Симулятор Данных (`backend/simulator/`)

*   **Назначение:** Генерация реалистичных тестовых данных для наполнения базы данных и тестирования детекторов.
*   **Функциональность:**
    *   Использует библиотеку `Faker` для создания имен, email, IP и т.д.
    *   Генерирует: Категории, Товары, Клиентов, Заказы, Активности пользователей.
    *   **Генерация аномалий:** Может вставлять аномальные паттерны с заданной вероятностью:
        *   Заказы с аномальной суммой.
        *   "Burst" активности (много одинаковых действий с одного IP).
        *   Серии неудачных логинов.
*   **Запуск:** Через API эндпоинт `POST /api/simulator/generate`.

## 7. Примерный Рабочий Процесс (Обнаружение Аномалии в Активности)

1.  Пользователь совершает действие на сайте (например, добавляет товар в корзину).
2.  Frontend отправляет данные об активности (`action_type`, `details` и т.д.) на Backend (`POST /api/activities`).
3.  Backend (`api/activities.py`):
    *   Валидирует данные с помощью схемы Pydantic (`schemas.UserActivityCreate`).
    *   Вызывает `crud.create_user_activity` для сохранения активности в таблице `user_activities`.
4.  (Позже, по расписанию или по кнопке в UI) Пользователь запускает детекцию аномалий через Frontend (`POST /api/anomalies/detect`).
5.  Backend (`api/anomalies.py`):
    *   Получает параметры (тип сущности='activity', список алгоритмов, лимит).
    *   Вызывает `crud.get_user_activities` для получения последних N активностей.
    *   Вызывает `ml_service.common.engineer_features` для расчета признаков.
    *   Для каждого выбранного алгоритма:
        *   Создает экземпляр детектора (например, `IsolationForestDetector()`).
        *   Вызывает метод `.detect()` детектора, передавая данные.
        *   Детектор выполняет предобработку (OHE, scaling), применяет модель, определяет аномальные точки.
    *   Для каждой найденной аномальной активности:
        *   Вызывает `crud.create_anomaly`, передавая `entity_type`, `entity_id`, имя детектора, описание, оценку и т.д.
    *   Сохраняет все найденные аномалии в таблице `anomalies`.
6.  Frontend запрашивает список аномалий (`GET /api/anomalies`).
7.  Backend (`api/anomalies.py`) вызывает `crud.get_anomalies`, получает данные из таблицы `anomalies`.
8.  Frontend отображает список аномалий пользователю. Пользователь может кликнуть на аномалию, чтобы увидеть детали или контекст сессии.

## 8. Заключение

AnomaLens 2.0 представляет собой комплексное решение для демонстрации и исследования методов обнаружения аномалий. Сочетание современного веб-стека (React, FastAPI) с разнообразными ML-алгоритмами позволяет гибко анализировать данные и визуализировать результаты. Проект имеет потенциал для дальнейшего развития путем добавления новых детекторов, источников данных и улучшения механизмов интерпретации аномалий. 