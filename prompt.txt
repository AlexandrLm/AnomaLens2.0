Создайте веб-приложение, используя React(JS) для фронтенда и Python для бэкенда, которое будет сфокусировано исключительно на обнаружении аномалий. Это должна быть специализированная платформа, созданная специально для демонстрации и обучения принципам работы систем обнаружения аномалий.

Основные требования:
1. Основная цель - демонстрация систем обнаружения аномалий
2. Фронтенд: SPA на React только с интерфейсом администратора (аутентификация пользователей не требуется)
3. Бэкенд: REST API на Python (с использованием FastAPI или Flask)
4. База данных: SQLite/PostgreSQL, структурированная как реальная база данных интернет-магазина для корректного обучения
5. ML-сервис: Специализированный Python-модуль для реализации различных алгоритмов обнаружения аномалий

Система обнаружения аномалий должна:
- Обнаруживать аномалии в поведении (действия с высокой частотой, необычные паттерны навигации, аномалии времени сессий)
- Идентифицировать аномалии в покупках (необычные суммы заказов, странные комбинации товаров)
- Отслеживать аномалии безопасности (подозрительные действия администраторов, атаки на API)
- Использовать различные методы обнаружения (статистические методы, обучение без учителя, обучение с учителем, изолирующий лес, автоэнкодеры)
- Классифицировать аномалии по типу и серьезности
- Визуализировать аномалии через дашборды и отчеты
- Позволять симулировать различные типы аномалий для тестирования и демонстрации
- Предоставлять функции объяснимого ИИ для понимания принятия решений при обнаружении аномалий
- Включать продвинутые сценарии симуляции, учитывающие сезонность и мошенническое поведение

Функциональность платформы должна включать:
- Панель администратора для управления системой
- Панели визуализации для обнаруженных аномалий
- Панель управления симуляцией
- Экраны настройки алгоритмов обнаружения
- Обзор базы данных со структурой, схожей с интернет-магазином

Расширенные функции:
- Комплексные обучающие модули с пошаговыми руководствами
- Визуальное сравнение различных алгоритмов обнаружения
- Интерактивная настройка параметров с визуализацией в реальном времени
- Продвинутые аналитические инструменты для исследователей
- Поддержка импорта реальных данных интернет-магазинов
- Поддержка A/B тестирования алгоритмов обнаружения

Создайте надежную архитектуру системы с:
- Модульным дизайном, полностью сфокусированным на обнаружении и визуализации аномалий
- Комплексными API-конечными точками для управления аномалиями
- Возможностью симулировать активность клиентов с нормальными и аномальными паттернами
- Гибкой настройкой чувствительности обнаружения
- Детальными инструментами визуализации для анализа обнаруженных аномалий

===========================================
ПОЛНОЕ ТЕХНИЧЕСКОЕ ЗАДАНИЕ
===========================================

# Техническое задание на разработку платформы с фокусом на обнаружение аномалий

## ВАЖНО: Основная цель проекта

Главная цель разрабатываемой системы - создание админ-панели для обнаружения аномалий в данных, имитирующих реальный интернет-магазин. Система должна предоставить исчерпывающие возможности для симуляции, визуализации и обнаружения различных видов аномалий. База данных должна быть структурирована максимально близко к реальной БД интернет-магазина, чтобы обеспечить корректное обучение алгоритмов и правильное функционирование системы обнаружения аномалий в условиях, приближенных к реальным.

## 1. Система обнаружения аномалий

### 1.1. Общее описание и цель
Разработка комплексной системы обнаружения аномалий в поведении пользователей, которая будет анализировать активность пользователей, выявлять подозрительные паттерны поведения и классифицировать аномалии по типам и уровням опасности.

### 1.2. Типы обнаруживаемых аномалий

Аномалии — это отклонения от нормального, ожидаемого поведения в данных интернет-магазина, которые могут указывать на технические проблемы, мошенничество, атаки или другие нежелательные активности. Ниже представлены основные категории аномалий, которые система должна обнаруживать:

#### 1.2.1. Аномалии в пользовательском поведении
- **Высокая частота действий**: необычно большое количество действий в течение короткого периода времени (например, 200+ просмотров товаров в минуту с одного IP-адреса)
- **Аномальная навигация**: нетипичные паттерны просмотра страниц (например, пользователь просматривает товары в неестественной последовательности — категориями, по ID или алфавиту)
- **Необычное время сессии**: слишком долгие или слишком короткие сессии (например, сессия длится более 5 часов без перерыва или множество сессий длительностью менее 5 секунд)
- **Повторяющиеся действия**: многократное выполнение одинаковых действий (например, добавление/удаление одного и того же товара в корзину 20+ раз)
- **Географические аномалии**: резкое изменение геолокации (например, логин в аккаунт из России, а через 10 минут из США)

#### 1.2.2. Аномалии в заказах и транзакциях
- **Аномальные суммы заказов**: заказы на необычно большие или маленькие суммы (например, заказ на 100,000+ рублей при среднем чеке в 3,000 рублей)
- **Странные комбинации товаров**: покупка товаров, которые редко приобретаются вместе (например, детские игрушки и алкоголь в одном заказе)
- **Всплески заказов**: резкое увеличение количества заказов определенных товаров (например, 50 заказов одного редкого товара за час)
- **Множественные заказы**: серия похожих заказов с разных аккаунтов, но с одинаковыми адресами доставки или способами оплаты
- **Аномалии в оформлении заказа**: необычно быстрое оформление заказа или многократные попытки оплаты разными картами

#### 1.2.3. Аномалии в работе с корзиной
- **Переполненные корзины**: добавление чрезмерного количества товаров или товаров на очень большие суммы
- **Массовые отказы от корзин**: необычно высокий процент брошенных корзин в определенный период
- **Странные модификации корзин**: многократные изменения количества товаров или добавление/удаление множества товаров
- **Долгоживущие корзины**: корзины, которые существуют необычно долго (например, несколько недель) без оформления заказа

#### 1.2.4. Аномалии безопасности
- **Попытки взлома**: множественные неудачные попытки авторизации (например, 10+ попыток входа за короткий период)
- **Подозрительные действия администратора**: массовое изменение цен, создание привилегированных пользователей, удаление большого количества данных
- **Атаки на API**: нетипичное использование API, аномальная частота запросов (например, более 100 запросов в минуту к API каталога)
- **Сканирование уязвимостей**: попытки доступа к несуществующим ресурсам, проверка известных уязвимостей (например, SQL-инъекции в поисковых запросах)
- **Спам-активность**: массовая отправка отзывов, вопросов или регистрация множества аккаунтов

#### 1.2.5. Аномалии в бизнес-метриках
- **Резкие изменения конверсии**: необычные колебания в показателях конверсии определенных страниц или товаров
- **Аномалии в среднем чеке**: значительные изменения в среднем чеке по категориям товаров
- **Необычная активность по промокодам**: массовое использование определенных промокодов или попытки подбора промокодов
- **Аномалии в поисковых запросах**: всплески определенных поисковых запросов, особенно связанных с уязвимостями или несуществующими разделами сайта
- **Чрезмерные возвраты**: необычно высокое количество возвратов определенных товаров или от определенных клиентов

### 1.3. Архитектура системы обнаружения аномалий

#### 1.3.1. Компоненты системы
- **Сборщик данных**: модуль для сбора и предварительной обработки данных об активности пользователей
- **Хранилище данных**: база данных для хранения нормализованных и исторических данных
- **Анализатор**: модуль для анализа собранных данных и выявления аномалий
- **Классификатор**: модуль для классификации обнаруженных аномалий по типам и уровням опасности
- **Модуль оповещений**: система для генерации и отправки уведомлений о выявленных аномалиях
- **Визуализатор**: интерфейс для отображения обнаруженных аномалий и их анализа
- **API**: программный интерфейс для интеграции с внешними системами

#### 1.3.2. Технологии и алгоритмы обнаружения аномалий
- **Статистические методы**: обнаружение выбросов на основе статистических показателей (z-score, IQR)
- **Машинное обучение без учителя**: алгоритмы кластеризации (K-means, DBSCAN), методы снижения размерности (PCA, t-SNE)
- **Машинное обучение с учителем**: классификация аномалий на основе исторических данных с метками
- **Изолирующий лес (Isolation Forest)**: выявление изолированных точек в данных
- **Автоэнкодеры**: нейросетевой подход для обнаружения аномалий на основе ошибок реконструкции
- **Временные ряды**: анализ поведения пользователей во времени (ARIMA, Prophet)
- **Поведенческие профили**: создание профилей нормального поведения пользователей и выявление отклонений

### 1.4. Функциональность модуля обнаружения аномалий

#### 1.4.1. Сбор и обработка данных
- Сбор данных о всех действиях пользователей в режиме реального времени
- Предварительная обработка и нормализация данных
- Агрегация данных по различным временным интервалам и пользователям
- Обогащение данных дополнительной информацией (геолокация, устройство, браузер и т.д.)

#### 1.4.2. Анализ и выявление аномалий
- Анализ активности пользователей на основе выбранных алгоритмов
- Выявление аномальных паттернов поведения
- Классификация аномалий по типам и уровням опасности
- Определение степени уверенности в выявленной аномалии
- Сохранение результатов анализа в базу данных

#### 1.4.3. Управление правилами обнаружения
- Настройка пороговых значений для различных типов аномалий
- Создание и редактирование правил обнаружения аномалий
- Управление весами и приоритетами правил
- Возможность включения/отключения отдельных правил

#### 1.4.4. Оповещения и уведомления
- Генерация оповещений о выявленных аномалиях
- Приоритизация оповещений по уровню опасности
- Отправка уведомлений через различные каналы (веб-интерфейс, email)
- Настройка правил оповещения для различных типов аномалий

#### 1.4.5. Визуализация и аналитика
- Отображение обнаруженных аномалий в виде списка с подробной информацией
- Визуализация аномалий на графиках и диаграммах
- Формирование отчетов по обнаруженным аномалиям
- Предоставление инструментов для анализа и расследования аномалий

#### 1.4.6. Симуляция аномалий для обучения
- Генерация синтетических аномалий различных типов
- Настройка параметров симуляции (интенсивность, длительность, типы аномалий)
- Маркировка симулированных аномалий для обучения алгоритмов
- Оценка эффективности системы на симулированных данных

### 1.5. API эндпоинты для работы с системой обнаружения аномалий

#### 1.5.1. Эндпоинты для управления правилами обнаружения
- GET `/api/anomalies/rules` - получение списка правил обнаружения аномалий
- GET `/api/anomalies/rules/{id}` - получение информации о конкретном правиле
- POST `/api/anomalies/rules` - создание нового правила
- PUT `/api/anomalies/rules/{id}` - обновление существующего правила
- DELETE `/api/anomalies/rules/{id}` - удаление правила
- PUT `/api/anomalies/rules/{id}/status` - включение/отключение правила
- POST `/api/anomalies/rules/test` - тестирование правила на исторических данных

#### 1.5.2. Эндпоинты для работы с обнаруженными аномалиями
- GET `/api/anomalies` - получение списка обнаруженных аномалий с фильтрацией и пагинацией
- GET `/api/anomalies/{id}` - получение подробной информации об аномалии
- PUT `/api/anomalies/{id}/status` - обновление статуса аномалии (рассмотрена, в процессе, закрыта)
- POST `/api/anomalies/{id}/comments` - добавление комментария к аномалии
- GET `/api/anomalies/dashboard` - получение сводной информации для дашборда аномалий
- GET `/api/anomalies/stats` - получение статистики по обнаруженным аномалиям
- GET `/api/anomalies/timeline` - получение временной шкалы обнаруженных аномалий
- GET `/api/anomalies/heatmap` - получение тепловой карты аномалий
- POST `/api/anomalies/export` - экспорт данных об аномалиях в различных форматах

#### 1.5.3. Эндпоинты для управления симуляциями
- GET `/api/simulator/scenarios` - получение списка сценариев симуляции
- GET `/api/simulator/scenarios/{id}` - получение информации о конкретном сценарии
- POST `/api/simulator/scenarios` - создание нового сценария симуляции
- PUT `/api/simulator/scenarios/{id}` - обновление существующего сценария
- DELETE `/api/simulator/scenarios/{id}` - удаление сценария
- POST `/api/simulator/start` - запуск симуляции с указанным сценарием
- GET `/api/simulator/status` - получение статуса текущей симуляции
- POST `/api/simulator/stop` - остановка текущей симуляции
- GET `/api/simulator/logs` - получение логов симуляции

#### 1.5.4. Эндпоинты для работы с данными интернет-магазина
- GET `/api/store/products` - получение списка товаров с фильтрацией
- GET `/api/store/products/{id}` - получение информации о конкретном товаре
- POST `/api/store/products` - создание нового товара (для симуляции)
- PUT `/api/store/products/{id}` - обновление существующего товара
- DELETE `/api/store/products/{id}` - удаление товара
- GET `/api/store/categories` - получение списка категорий
- GET `/api/store/orders` - получение списка заказов с фильтрацией
- GET `/api/store/orders/{id}` - получение информации о конкретном заказе
- GET `/api/store/customers` - получение списка клиентов с фильтрацией
- GET `/api/store/customers/{id}` - получение информации о конкретном клиенте
- GET `/api/store/stats` - получение статистики магазина (конверсия, средний чек и т.д.)
- GET `/api/store/activities` - получение списка активностей пользователей
- POST `/api/store/import` - импорт данных из CSV/JSON файлов
- POST `/api/store/generate` - генерация тестовых данных

#### 1.5.5. Эндпоинты для объяснимого ИИ и обучения
- GET `/api/anomalies/{id}/explanation` - получение объяснения причин обнаружения аномалии
- GET `/api/anomalies/{id}/factors` - получение факторов, повлиявших на классификацию
- GET `/api/models` - получение списка моделей обнаружения аномалий
- GET `/api/models/{id}` - получение информации о конкретной модели
- POST `/api/models/{id}/train` - запуск обучения модели
- GET `/api/models/{id}/metrics` - получение метрик производительности модели
- GET `/api/models/{id}/confusion-matrix` - получение матрицы ошибок модели
- GET `/api/learning/algorithms` - получение информации об алгоритмах обнаружения аномалий
- GET `/api/learning/examples` - получение примеров аномалий для обучения

#### 1.5.6. Эндпоинты для управления системой и мониторинга
- GET `/api/system/status` - получение статуса системы
- GET `/api/system/logs` - получение системных логов
- GET `/api/system/performance` - получение информации о производительности
- PUT `/api/system/settings` - обновление настроек системы
- POST `/api/system/maintenance` - запуск процедур обслуживания (очистка логов, оптимизация БД)
- GET `/api/system/tasks` - получение списка фоновых задач
- POST `/api/system/tasks/{id}/cancel` - отмена фоновой задачи
- GET `/api/system/database` - получение информации о состоянии базы данных
- POST `/api/system/database/backup` - создание резервной копии базы данных

## 2. Общее описание проекта

### 2.1. Цель проекта
Разработка админ-панели для анализа аномального поведения в данных интернет-магазина с помощью методов машинного обучения и демонстрации работы системы обнаружения аномалий.

### 2.2. Компоненты системы
- **Клиентская часть**: SPA-приложение на React (только админ-панель)
- **Серверная часть**: REST API на Python (Flask/FastAPI)
- **База данных**: SQLite/PostgreSQL с реалистичной структурой интернет-магазина
- **ML-сервис**: Python-модуль для обнаружения аномалий

## 3. Функциональные требования

### 3.1. Функциональность админ-панели

#### 3.1.1. Панель мониторинга
- Просмотр общей информации о системе
- Просмотр статистики обнаруженных аномалий
- Настройка дашбордов
- Поиск и фильтрация данных
- Просмотр детальной информации об аномалиях

#### 3.1.2. Управление симуляциями
- Запуск и остановка симуляций
- Настройка параметров симуляций
- Просмотр логов симуляций
- Сохранение и загрузка сценариев симуляций
- Экспорт результатов симуляций

#### 3.1.3. Обучающий раздел
- Просмотр обучающих материалов по алгоритмам
- Практические упражнения по обнаружению аномалий
- Тестирование алгоритмов
- Доступ к базе знаний по аномалиям

#### 3.1.4. Управление системой
- Настройка параметров системы
- Просмотр логов системы
- Управление ресурсами
- Мониторинг производительности системы

#### 3.1.5. Управление симуляцией и аномалиями
- Настройка параметров симуляции активности
- Управление интенсивностью симуляции
- Генерация различных типов аномалий для тестирования системы
- Мониторинг симуляции в реальном времени
- Просмотр и анализ обнаруженных аномалий
- Экспорт данных симуляции и результатов обнаружения

#### 3.1.6. Управление данными
- Импорт данных из CSV/JSON файлов
- Экспорт данных
- Очистка и обработка данных
- Просмотр структуры базы данных
- Генерация тестовых данных

## 4. Технические требования

### 4.1. Клиентская часть (React)

#### 4.1.1. Технологический стек
- React 18+
- React Router для маршрутизации
- Redux или React Context для управления состоянием
- Axios для HTTP-запросов
- CSS Modules или Styled Components для стилизации
- Chart.js или D3.js для визуализации данных аномалий

#### 4.1.2. Структура клиентской части
- `/src/pages/anomalies/` - страницы для работы с аномалиями
- `/src/components/anomalies/` - компоненты для визуализации аномалий
- `/src/components/simulation/` - компоненты управления симуляцией
- `/src/services/anomalyService.js` - сервис для работы с API аномалий
- `/src/pages/learning/` - страницы обучающих материалов
- `/src/components/explainable-ai/` - компоненты для визуализации объяснений ИИ
- `/src/pages/research/` - страницы для исследователей и аналитиков
- `/src/components/dashboard/` - компоненты настраиваемых дашбордов

### 4.2. Серверная часть (Python)

#### 4.2.1. Технологический стек
- Python 3.10+
- FastAPI или Flask для создания REST API
- SQLAlchemy для работы с базой данных
- JWT для аутентификации
- Scikit-learn, PyTorch для реализации алгоритмов обнаружения аномалий
- Pandas для анализа и обработки данных
- Celery для фоновых задач (симуляция и анализ)
- LIME и SHAP для объяснимого ИИ
- Socket.IO для коммуникации в реальном времени
- Redis для кэширования и обмена данными

### 4.3. База данных

#### 4.3.1. Схема базы данных (максимально приближенная к реальному интернет-магазину)

##### Основные таблицы интернет-магазина:
- **Товары** (`products`): id, name, sku, description, price, cost_price, regular_price, sale_price, category_id, brand_id, supplier_id, tax_class, stock_quantity, weight, dimensions, color, size, material, is_featured, is_active, created_at, updated_at, views_count, meta_title, meta_description
- **Категории товаров** (`categories`): id, name, slug, description, parent_id, image_url, is_active, sort_order, created_at, updated_at
- **Бренды** (`brands`): id, name, slug, description, logo_url, website_url, country, founded_year, is_active, created_at, updated_at
- **Поставщики** (`suppliers`): id, name, contact_person, email, phone, address, country, city, postal_code, tax_number, is_active, created_at, updated_at
- **Атрибуты товаров** (`product_attributes`): id, product_id, attribute_name, attribute_value
- **Изображения товаров** (`product_images`): id, product_id, image_url, alt_text, sort_order, is_primary
- **Заказы** (`orders`): id, order_number, customer_id, order_status, payment_status, shipping_status, total_price, tax_amount, shipping_amount, discount_amount, shipping_address_id, billing_address_id, payment_method, shipping_method, customer_note, ip_address, user_agent, currency, created_at, updated_at, completed_at
- **Детали заказов** (`order_items`): id, order_id, product_id, product_name, sku, quantity, unit_price, total_price, tax_amount, discount_amount, is_gift, created_at
- **Состояние заказов** (`order_status_history`): id, order_id, status, comment, created_by, created_at
- **Клиенты** (`customers`): id, email, first_name, last_name, phone, date_of_birth, gender, is_guest, created_at, updated_at, last_login, total_orders, total_spent
- **Адреса** (`addresses`): id, customer_id, address_type, first_name, last_name, company, address_line1, address_line2, city, state, postal_code, country, phone, is_default
- **Корзина** (`cart`): id, customer_id, session_id, currency, created_at, updated_at
- **Товары в корзине** (`cart_items`): id, cart_id, product_id, quantity, added_at, last_updated
- **Способы оплаты** (`payment_methods`): id, name, description, is_active, sort_order
- **Транзакции** (`transactions`): id, order_id, transaction_id, payment_method, amount, status, created_at
- **Способы доставки** (`shipping_methods`): id, name, description, price, is_active, sort_order
- **Купоны** (`coupons`): id, code, description, discount_type, discount_amount, minimum_spend, maximum_spend, start_date, end_date, is_active, usage_limit, used_count, created_at, updated_at
- **Отзывы о товарах** (`reviews`): id, product_id, customer_id, rating, title, content, is_verified, status, created_at, ip_address

##### Таблицы для логирования действий и обнаружения аномалий:
- **Просмотры товаров** (`product_views`): id, product_id, customer_id, session_id, ip_address, user_agent, referrer, viewed_at
- **Поисковые запросы** (`search_queries`): id, customer_id, session_id, query_text, results_count, is_autocomplete, created_at, ip_address
- **Клики по товарам** (`product_clicks`): id, product_id, customer_id, session_id, source_page, ip_address, created_at
- **Добавления в корзину** (`cart_additions`): id, product_id, customer_id, session_id, quantity, ip_address, created_at
- **Удаления из корзины** (`cart_removals`): id, product_id, customer_id, session_id, quantity, ip_address, created_at
- **Начало оформления заказа** (`checkout_starts`): id, cart_id, customer_id, session_id, ip_address, created_at
- **Завершение оформления заказа** (`checkout_completions`): id, order_id, customer_id, session_id, ip_address, time_spent, created_at
- **Отказы от оформления заказа** (`checkout_abandons`): id, cart_id, customer_id, session_id, abandon_step, ip_address, created_at
- **Входы в систему** (`user_logins`): id, user_type, user_id, ip_address, user_agent, success, failure_reason, created_at
- **Сессии** (`sessions`): id, customer_id, session_id, ip_address, user_agent, start_time, end_time, duration, pages_viewed, actions_count
- **Навигация по страницам** (`page_views`): id, session_id, page_url, page_title, customer_id, referrer, time_spent, ip_address, created_at

##### Таблицы для обнаружения аномалий:
- **Обнаруженные аномалии** (`detected_anomalies`): id, anomaly_type, severity, detection_method, details, confidence_score, detected_at, is_verified, verification_result, verified_by, verified_at
- **Правила обнаружения аномалий** (`anomaly_rules`): id, name, description, rule_type, rule_logic, severity, is_active, created_at, updated_at
- **Базовые модели поведения** (`behavior_baselines`): id, entity_type, entity_id, metric_name, baseline_value, variance, sample_size, last_updated
- **Ложные срабатывания** (`false_positives`): id, anomaly_id, reason, reported_by, reported_at
- **Метрики мониторинга** (`monitoring_metrics`): id, metric_name, entity_type, entity_id, value, timestamp
- **Сценарии симуляций** (`simulation_scenarios`): id, name, description, config_params, created_at, updated_at

#### 4.3.2. Индексы и оптимизация
- Индексы по часто используемым полям для ускорения запросов (product_id, customer_id, session_id, created_at)
- Индексы для полнотекстового поиска по описаниям товаров и поисковым запросам
- Партиционирование таблиц с большим объемом данных (product_views, page_views, detected_anomalies)
- Денормализация некоторых данных для ускорения аналитических запросов
- Оптимизация запросов для работы с временными рядами
- Создание материализованных представлений для часто запрашиваемых агрегированных данных

## 5. Дополнительные требования к системе обнаружения аномалий

### 5.1. Производительность и масштабируемость
- Обработка и анализ больших объемов данных в режиме реального времени
- Асинхронная обработка данных
- Возможность горизонтального масштабирования системы

### 5.2. Гибкость и настраиваемость
- Возможность добавления новых алгоритмов обнаружения аномалий
- Настройка чувствительности системы для различных типов аномалий
- Адаптация системы к изменениям в поведении пользователей

### 5.3. Обучение и улучшение
- Механизм обратной связи для улучшения алгоритмов
- Автоматическое обучение моделей на новых данных
- Периодическая оценка эффективности системы

### 5.4. Визуализация и анализ
- Интерактивные дашборды для анализа аномалий
- Временная динамика обнаруженных аномалий
- Детализация информации об аномалии
- Связи между различными типами аномалий

## 6. Результаты и сроки

### 6.1. Ожидаемые результаты
- Разработанная полнофункциональная система обнаружения аномалий
- Интегрированное SPA-приложение на React с возможностью визуализации аномалий
- REST API на Python для обработки данных и выявления аномалий
- Инструменты для симуляции различных типов аномалий
- Подробная документация по работе с системой


## 7. Ключевые показатели эффективности системы обнаружения аномалий

### 7.1. Точность обнаружения
- Минимизация ложноположительных срабатываний (False Positives) < 5%
- Обнаружение не менее 90% симулированных аномалий различных типов
- Корректная классификация типов аномалий с точностью > 85%

### 7.2. Производительность
- Время обработки и анализа одного действия пользователя < 100 мс
- Возможность обработки не менее 1000 действий в секунду
- Задержка в обнаружении аномалий не более 5 минут

### 7.3. Масштабируемость
- Линейный рост производительности при добавлении вычислительных ресурсов
- Стабильная работа при одновременной активности не менее 10000 симулированных пользователей
- Эффективное использование ресурсов (CPU, память, хранилище)

## 8. Расширенные функции системы

### 8.1. Инструменты для исследователей и аналитиков
- Экспорт необработанных данных для дальнейшего анализа
- Инструменты для создания собственных моделей и их тестирования
- A/B тестирование различных алгоритмов обнаружения
- Песочница для безопасного тестирования новых методов обнаружения

### 8.2. Расширенные сценарии симуляции
- Готовые шаблоны для различных типов аномалий
- Сценарии для имитации координированных атак
- Симуляция распределенных атак
- Генерация данных с учетом временных паттернов

### 8.3. Обучающий модуль и инструменты демонстрации
- Пошаговые обучающие сценарии с объяснением работы каждого алгоритма
- Визуальное сравнение эффективности разных методов обнаружения
- Интерактивная настройка параметров алгоритмов с мгновенной визуализацией
- Библиотека примеров аномалий с разбором и анализом

### 8.4. Объяснимый искусственный интеллект
- Модуль объяснения причин классификации события как аномального
- Визуализация признаков и факторов, повлиявших на принятие решения
- Оценка степени уверенности в обнаружении аномалии
- Представление цепочки рассуждений алгоритма в понятном для человека виде

### 8.5. Типовые запросы и алгоритмы для обнаружения аномалий

#### 8.5.1. Примеры запросов для выявления аномалий

##### Выявление аномальной частоты действий:
- Запросы для выявления пользователей с аномально высоким количеством просмотров товаров
- Определение скорости выполнения действий (действий в минуту)
- Анализ времени между действиями для выявления автоматизированной активности

##### Обнаружение аномальных заказов:
- Выявление заказов с аномально высокой стоимостью на основе статистических методов
- Сравнение с историческими данными о стоимости заказов
- Использование z-score для определения выбросов в суммах заказов

##### Выявление потенциального мошенничества:
- Обнаружение множественных заказов с разных аккаунтов на один адрес
- Анализ частоты заказов и общей суммы трат для выявления подозрительной активности
- Выявление шаблонов в данных доставки и оплаты

##### Выявление аномальной навигации:
- Обнаружение подозрительного линейного просмотра товаров (по ID или по алфавиту)
- Анализ последовательности просмотра страниц для выявления нетипичных паттернов
- Отслеживание длительности просмотра страниц для определения ботов

#### 8.5.2. Алгоритмы для разных типов аномалий

##### Статистические методы:
- **Z-score** для обнаружения числовых выбросов в суммах заказов, частоте действий, времени сессий
- **IQR (Межквартильный размах)** для обнаружения выбросов без предположения о нормальном распределении

##### Алгоритмы машинного обучения:
- **Isolation Forest** для обнаружения изолированных точек в многомерных данных
- **Автоэнкодеры** для обнаружения аномалий в сложных паттернах
- **DBSCAN** для кластеризации и выявления выбросов на основе плотности в многомерном пространстве признаков

##### Анализ временных рядов:
- **ARIMA** для обнаружения аномалий в сезонных бизнес-метриках
- **Prophet** для прогнозирования ожидаемых значений и выявления отклонений
- **Экспоненциальное сглаживание** для обнаружения внезапных изменений в трендах

#### 8.5.3. Комбинированные методы обнаружения

##### Обнаружение мошеннических заказов:
- Комбинирование характеристик заказа, клиента и исторических данных
- Извлечение информативных признаков из различных источников данных
- Применение ансамблевых методов для повышения точности определения аномалий
- Учет временных паттернов и географических факторов при выявлении мошенничества

Все разработки должны быть направлены в первую очередь на создание эффективной системы обнаружения аномалий, а функциональность интернет-магазина является вспомогательной и служит для генерации реалистичных данных и проверки работы системы. 

### 8.6. Требования к визуализации аномалий в админ-панели

#### 8.6.1. Основной дашборд
- **Общая статистика**:
  - Количество обнаруженных аномалий по типам
  - Тренды аномалий за последние 24 часа, 7 дней, 30 дней
  - Общее количество событий, проанализированных системой
  - Соотношение аномалий к нормальным событиям
  - Статистика по моделям обнаружения (точность, полнота, F1-score)

- **Тепловая карта активности**:
  - Визуализация активности по времени суток и дням недели
  - Подсветка периодов с высокой концентрацией аномалий
  - Возможность фильтрации по типам аномалий

- **Географическая карта**:
  - Распределение активности и аномалий по географическим регионам
  - Кластеризация аномалий на карте
  - Возможность детализации до уровня города/района

- **Временная шкала аномалий**:
  - Интерактивная временная шкала с возможностью масштабирования
  - Маркеры разных типов аномалий на шкале
  - Группировка взаимосвязанных аномалий

#### 8.6.2. Специализированные графики для типов аномалий

- **Для поведенческих аномалий**:
  - Графики частоты действий с выделением аномальных периодов
  - Графики продолжительности сессий с порогами нормального поведения
  - Диаграммы переходов между страницами с выделением аномальных путей

- **Для аномалий в заказах и транзакциях**:
  - Box plots для визуализации распределения сумм заказов с выбросами
  - Временные ряды объема продаж с детектированными выбросами
  - Графики корреляций между характеристиками заказов

- **Для аномалий безопасности**:
  - Таблицы с попытками неавторизованного доступа
  - Графики частоты API-запросов с порогами нормальной нагрузки
  - Визуализация подозрительных сетевых запросов (по IP-адресам, User-Agent)

#### 8.6.3. Детальные представления для анализа аномалий

- **Карточка аномалии**:
  - Подробная информация об обнаруженной аномалии
  - История активности перед аномалией
  - Граф взаимосвязей с другими аномалиями
  - Возможные причины аномалии (на основе объяснимого ИИ)
  - Рекомендуемые действия по реагированию

- **Профиль клиента с аномалиями**:
  - История покупок и действий клиента
  - Отмеченные аномальные события
  - Сравнение с типичным поведением (перцентили, z-scores)
  - Графики активности с выделением периодов аномального поведения

- **Анализ паттернов**:
  - Представление с группировкой похожих аномалий
  - Визуализация кластеров аномалий в многомерном пространстве (PCA, t-SNE)
  - Инструменты для исследования корреляций между характеристиками аномалий

#### 8.6.4. Инструменты для исследования и настройки

- **Сравнение алгоритмов**:
  - Графики ROC-кривых для разных алгоритмов обнаружения
  - Матрицы ошибок для каждого алгоритма
  - Сравнительные таблицы метрик (точность, полнота, F1-score, AUC)

- **Интерактивные настройки правил**:
  - Визуализация эффекта изменения порогов правил на исторических данных
  - Графики с регулируемыми порогами для разных метрик
  - Предпросмотр количества срабатываний при изменении параметров

- **Построитель запросов**:
  - Интерфейс для создания пользовательских запросов к данным
  - Визуализация результатов запросов с возможностью экспорта
  - Инструменты для сохранения и повторного использования запросов

#### 8.6.5. Технические требования к визуализации

- **Интерактивность**:
  - Возможность масштабирования и панорамирования графиков
  - Фильтрация данных прямо на графиках
  - Всплывающие подсказки с детальной информацией
  - Переключение между различными представлениями данных

- **Обновление данных**:
  - Настраиваемая частота обновления данных на дашбордах
  - Визуальные индикаторы новых обнаруженных аномалий
  - Потоковое обновление для критических показателей

- **Кастомизация**:
  - Возможность настройки дашбордов под конкретные нужды
  - Создание пользовательских панелей мониторинга
  - Сохранение и загрузка конфигураций дашбордов

- **Экспорт и отчеты**:
  - Экспорт визуализаций в форматы PNG, PDF, SVG
  - Формирование регулярных отчетов на основе дашбордов
  - Планирование автоматической отправки отчетов

- **Производительность**:
  - Оптимизация для работы с большими объемами данных
  - Использование агрегированных данных для ускорения отображения
  - Ленивая загрузка для тяжелых визуализаций

Все разработки должны быть направлены в первую очередь на создание эффективной системы обнаружения аномалий, а функциональность интернет-магазина является вспомогательной и служит для генерации реалистичных данных и проверки работы системы. 

### 8.7. Интеграция с Ollama для расширенных возможностей обнаружения аномалий

#### 8.7.1. Архитектура интеграции с Ollama для прототипа
- **Локальный LLM-сервис**: базовая настройка Ollama для локального запуска языковых моделей
- **REST API интерфейс**: простой API для взаимодействия основной системы с Ollama
- **Синхронные запросы**: прямое взаимодействие с моделью для быстрой разработки прототипа
- **Однонодовое развертывание**: запуск на одном сервере для упрощения архитектуры на этапе прототипирования

#### 8.7.2. Применение Ollama в системе обнаружения аномалий
- **Интерпретация аномалий**: использование языковых моделей для генерации человекочитаемых объяснений обнаруженных аномалий
- **Анализ текстовых данных**: обработка отзывов, комментариев и запросов пользователей для выявления аномального контента
- **Генерация синтетических данных**: создание разнообразных сценариев для тестирования системы обнаружения аномалий
- **Интерактивные подсказки**: генерация рекомендаций по реагированию на конкретные типы аномалий
- **Автоматическое создание правил**: формирование новых правил обнаружения аномалий на основе анализа исторических данных

#### 8.7.3. Улучшение объяснимости с помощью Ollama
- **Детальный анализ аномалий**: генерация подробных отчетов о причинах и характеристиках обнаруженных аномалий
- **Семантический анализ**: выявление связей между различными аномалиями на основе их характеристик
- **Временная контекстуализация**: анализ аномалий в контексте исторических данных и сезонности
- **Адаптивные пояснения**: настройка уровня детализации объяснений в зависимости от роли пользователя
- **Мультиязычная поддержка**: генерация объяснений на разных языках для международных команд

#### 8.7.4. Минимальные требования для прототипа интеграции Ollama
- **Базовая модель**: использование компактных моделей (например, Llama 3 8B или меньше)
- **Упрощенное API**: минимальный набор эндпоинтов для основных функций
- **Оптимизация**: базовая квантизация модели для работы на доступном оборудовании
- **Легковесный клиент**: простая Python-библиотека для взаимодействия с Ollama

#### 8.7.5. Основные эндпоинты API для работы с Ollama в прототипе
- POST `/api/ollama/explain` - получение объяснения для конкретной аномалии
- POST `/api/ollama/generate-scenario` - генерация простого сценария тестирования
- POST `/api/ollama/analyze-text` - базовый анализ текстовых данных